/*
  generated by <https://m3.material.io/theme-builder#/custom>
  from accent color FF2F7C
*/

import 'package:flutter/material.dart';

const accent = Color(0xFFFF2F7C);

CustomColors lightCustomColors = const CustomColors(
  sourceAccent: Color(0xFFFF2F7C),
  accent: Color(0xFFBB0054),
  onAccent: Color(0xFFFFFFFF),
  accentContainer: Color(0xFFFFD9DF),
  onAccentContainer: Color(0xFF3F0018),
);

CustomColors darkCustomColors = const CustomColors(
  sourceAccent: Color(0xFFFF2F7C),
  accent: Color(0xFFFFB1C1),
  onAccent: Color(0xFF66002A),
  accentContainer: Color(0xFF8F003F),
  onAccentContainer: Color(0xFFFFD9DF),
);



/// Defines a set of custom colors, each comprised of 4 complementary tones.
///
/// See also:
///   * <https://m3.material.io/styles/color/the-color-system/custom-colors>
@immutable
class CustomColors extends ThemeExtension<CustomColors> {
  const CustomColors({
    required this.sourceAccent,
    required this.accent,
    required this.onAccent,
    required this.accentContainer,
    required this.onAccentContainer,
  });

  final Color? sourceAccent;
  final Color? accent;
  final Color? onAccent;
  final Color? accentContainer;
  final Color? onAccentContainer;

  @override
  CustomColors copyWith({
    Color? sourceAccent,
    Color? accent,
    Color? onAccent,
    Color? accentContainer,
    Color? onAccentContainer,
  }) {
    return CustomColors(
      sourceAccent: sourceAccent ?? this.sourceAccent,
      accent: accent ?? this.accent,
      onAccent: onAccent ?? this.onAccent,
      accentContainer: accentContainer ?? this.accentContainer,
      onAccentContainer: onAccentContainer ?? this.onAccentContainer,
    );
  }

  @override
  CustomColors lerp(ThemeExtension<CustomColors>? other, double t) {
    if (other is! CustomColors) {
      return this;
    }
    return CustomColors(
      sourceAccent: Color.lerp(sourceAccent, other.sourceAccent, t),
      accent: Color.lerp(accent, other.accent, t),
      onAccent: Color.lerp(onAccent, other.onAccent, t),
      accentContainer: Color.lerp(accentContainer, other.accentContainer, t),
      onAccentContainer: Color.lerp(onAccentContainer, other.onAccentContainer, t),
    );
  }

  /// Returns an instance of [CustomColors] in which the following custom
  /// colors are harmonized with [dynamic]'s [ColorScheme.primary].
  ///
  /// See also:
  ///   * <https://m3.material.io/styles/color/the-color-system/custom-colors#harmonization>
  CustomColors harmonized(ColorScheme dynamic) {
    return copyWith(
    );
  }
}

/* written manually */

extension CustomColor on BuildContext {
  CustomColors? get accent => Theme.of(this).extension<CustomColors>();
}
